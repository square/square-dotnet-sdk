using NUnit.Framework;

// ReSharper disable NullableWarningSuppressionIsUsed

namespace Square.Test.Unit;

[TestFixture]
public class WebhooksHelperTests
{
    // These were generated by using webhook.site and the Square Developer Portal to send a test notification to a test webhook subscription.
    private const string NotificationUrl =
        "https://webhook.site/679a4f3a-dcfa-49ee-bac5-9d0edad886b9";
    private const string SignatureKey = "Ibxx_5AKakO-3qeNVR61Dw";
    private const string BodyString =
        "{\"merchant_id\":\"MLEFBHHSJGVHD\",\"type\":\"webhooks.test_notification\",\"event_id\":\"ac3ac95b-f97d-458c-a6e6-18981597e05f\",\"created_at\":\"2022-07-13T20:30:59.037339943Z\",\"data\":{\"type\":\"webhooks\",\"id\":\"bc368e64-01aa-407e-b46e-3231809b1129\"}}";
    private const string SignatureHeader = "GF4YkrJgGBDZ9NIYbNXBnMzqb2HoL4RW/S6vkZ9/2N4=";

    [Test]
    public void VerifySignatureIsTrueForValidNotification()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.True);
    }

    [Test]
    public void VerifySignatureIsTrueForEscapedBodyValidNotification()
    {
        const string escapedRequestBody = "{\"data\":{\"type\":\"webhooks\",\"id\":\">id<\"}}";
        const string newSignatureHeader = "Cxt7+aTi4rKgcA0bC4g9EHdVtLSDWdqccmL5MvihU4U=";
        const string signatureKey = "signature-key";
        const string url = "https://webhook.site/webhooks";

        var result = WebhooksHelper.VerifySignature(
            escapedRequestBody,
            newSignatureHeader,
            signatureKey,
            url
        );
        Assert.That(result, Is.True);
    }

    [Test]
    public void VerifySignatureIsFalseIfNotificationUrlMismatch()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            SignatureHeader,
            SignatureKey,
            "https://webhook.site/79a4f3a-dcfa-49ee-bac5-9d0edad886b9"
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfSignatureKeyIsInvalid()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            SignatureHeader,
            "MCmhFRxGX82xMwg5FsaoQA",
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfSignatureHeaderIsInvalid()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            "1z2n3DEJJiUPKcPzQo1ftvbxGdw=",
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfSignatureHeaderIsEmpty()
    {
        var result = WebhooksHelper.VerifySignature(BodyString, "", SignatureKey, NotificationUrl);
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfSignatureHeaderIsNull()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            null!,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfBodyMismatch()
    {
        var bodyString =
            "{\"merchant_id\":\"MLEFBHHSJGVHD\",\"type\":\"webhooks.test_notification\",\"event_id\":\"ac3ac95b-f97d-458c-a6e6-18981597e05f\",\"created_at\":\"2022-06-13T20:30:59.037339943Z\",\"data\":{\"type\":\"webhooks\",\"id\":\"bc368e64-01aa-407e-b46e-3231809b1129\"}}";
        var result = WebhooksHelper.VerifySignature(
            bodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfBodyIsFormatted()
    {
        string bodyString = """
            {
                "merchant_id": "MLEFBHHSJGVHD",
                "type": "webhooks.test_notification",
                "event_id": "ac3ac95b-f97d-458c-a6e6-18981597e05f",
                "created_at": "2022-07-13T20:30:59.037339943Z",
                "data": {
                    "type": "webhooks",
                    "id": "bc368e64-01aa-407e-b46e-3231809b1129"
                }
            }
            """;
        var result = WebhooksHelper.VerifySignature(
            bodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfBodyIsEmpty()
    {
        var result = WebhooksHelper.VerifySignature(
            "",
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureIsFalseIfBodyIsNull()
    {
        var result = WebhooksHelper.VerifySignature(
            "",
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureThrowsIfSignatureKeyIsEmpty()
    {
        var result = Assert.Throws<ArgumentNullException>(
            () => WebhooksHelper.VerifySignature(BodyString, SignatureHeader, "", NotificationUrl)
        );
        Assert.That(result.Message, Does.StartWith("Value cannot be null."));
        Assert.That(result.Message, Does.Contain("signatureKey"));
    }

    [Test]
    public void VerifySignatureThrowsIfSignatureKeyIsNull()
    {
        var result = Assert.Throws<ArgumentNullException>(
            () =>
                WebhooksHelper.VerifySignature(BodyString, SignatureHeader, null!, NotificationUrl)
        );
        Assert.That(result.Message, Does.StartWith("Value cannot be null."));
        Assert.That(result.Message, Does.Contain("signatureKey"));
    }

    [Test]
    public void VerifySignatureThrowsIfNotificationUrlIsEmpty()
    {
        var result = Assert.Throws<ArgumentNullException>(
            () => WebhooksHelper.VerifySignature(BodyString, SignatureHeader, SignatureKey, "")
        );
        Assert.That(result.Message, Does.StartWith("Value cannot be null."));
        Assert.That(result.Message, Does.Contain("notificationUrl"));
    }

    [Test]
    public void VerifySignatureThrowsIfNotificationUrlIsNull()
    {
        var result = Assert.Throws<ArgumentNullException>(
            () => WebhooksHelper.VerifySignature(BodyString, SignatureHeader, SignatureKey, null!)
        );
        Assert.That(result.Message, Does.StartWith("Value cannot be null."));
        Assert.That(result.Message, Does.Contain("notificationUrl"));
    }

    [Test]
    public void VerifySignatureOldIsTrueForValidNotification()
    {
        var result = WebhooksHelper.VerifySignature(
            BodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.True);
    }

    [Test]
    public void VerifySignatureOldIsTrueForEscapedBodyValidNotification()
    {
        const string escapedRequestBody = "{\"data\":{\"type\":\"webhooks\",\"id\":\">id<\"}}";
        const string newSignatureHeader = "Cxt7+aTi4rKgcA0bC4g9EHdVtLSDWdqccmL5MvihU4U=";
        const string signatureKey = "signature-key";
        const string url = "https://webhook.site/webhooks";

        var result = WebhooksHelper.VerifySignature(
            escapedRequestBody,
            newSignatureHeader,
            signatureKey,
            url
        );
        Assert.That(result, Is.True);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfNotificationUrlMismatch()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            BodyString,
            SignatureHeader,
            SignatureKey,
            "https://webhook.site/79a4f3a-dcfa-49ee-bac5-9d0edad886b9"
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfSignatureKeyIsInvalid()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            BodyString,
            SignatureHeader,
            "MCmhFRxGX82xMwg5FsaoQA",
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfSignatureHeaderIsInvalid()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            BodyString,
            "1z2n3DEJJiUPKcPzQo1ftvbxGdw=",
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfSignatureHeaderIsEmpty()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            BodyString,
            "",
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfBodyMismatch()
    {
        var bodyString =
            "{\"merchant_id\":\"MLEFBHHSJGVHD\",\"type\":\"webhooks.test_notification\",\"event_id\":\"ac3ac95b-f97d-458c-a6e6-18981597e05f\",\"created_at\":\"2022-06-13T20:30:59.037339943Z\",\"data\":{\"type\":\"webhooks\",\"id\":\"bc368e64-01aa-407e-b46e-3231809b1129\"}}";
        var result = WebhooksHelper.VerifySignatureOld(
            bodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfBodyIsFormatted()
    {
        string bodyString = """
            {
                "merchant_id": "MLEFBHHSJGVHD",
                "type": "webhooks.test_notification",
                "event_id": "ac3ac95b-f97d-458c-a6e6-18981597e05f",
                "created_at": "2022-07-13T20:30:59.037339943Z",
                "data": {
                    "type": "webhooks",
                    "id": "bc368e64-01aa-407e-b46e-3231809b1129"
                }
            }
            """;
        var result = WebhooksHelper.VerifySignatureOld(
            bodyString,
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfBodyIsEmpty()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            "",
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }

    [Test]
    public void VerifySignatureOldIsFalseIfBodyIsNull()
    {
        var result = WebhooksHelper.VerifySignatureOld(
            "",
            SignatureHeader,
            SignatureKey,
            NotificationUrl
        );
        Assert.That(result, Is.False);
    }
}
