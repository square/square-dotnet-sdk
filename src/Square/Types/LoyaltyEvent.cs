using System.Text.Json;
using System.Text.Json.Serialization;
using Square.Core;

namespace Square;

/// <summary>
/// Provides information about a loyalty event.
/// For more information, see [Search for Balance-Changing Loyalty Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).
/// </summary>
public record LoyaltyEvent
{
    /// <summary>
    /// The Square-assigned ID of the loyalty event.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("id")]
    public required string Id { get; set; }

    /// <summary>
    /// The type of the loyalty event.
    /// See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
    /// </summary>
    [JsonPropertyName("type")]
    public required LoyaltyEventType Type { get; set; }

    /// <summary>
    /// The timestamp when the event was created, in RFC 3339 format.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("created_at")]
    public required string CreatedAt { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
    /// </summary>
    [JsonPropertyName("accumulate_points")]
    public LoyaltyEventAccumulatePoints? AccumulatePoints { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `CREATE_REWARD`.
    /// </summary>
    [JsonPropertyName("create_reward")]
    public LoyaltyEventCreateReward? CreateReward { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `REDEEM_REWARD`.
    /// </summary>
    [JsonPropertyName("redeem_reward")]
    public LoyaltyEventRedeemReward? RedeemReward { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `DELETE_REWARD`.
    /// </summary>
    [JsonPropertyName("delete_reward")]
    public LoyaltyEventDeleteReward? DeleteReward { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `ADJUST_POINTS`.
    /// </summary>
    [JsonPropertyName("adjust_points")]
    public LoyaltyEventAdjustPoints? AdjustPoints { get; set; }

    /// <summary>
    /// The ID of the [loyalty account](entity:LoyaltyAccount) associated with the event.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("loyalty_account_id")]
    public required string LoyaltyAccountId { get; set; }

    /// <summary>
    /// The ID of the [location](entity:Location) where the event occurred.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("location_id")]
    public string? LocationId { get; set; }

    /// <summary>
    /// Defines whether the event was generated by the Square Point of Sale.
    /// See [LoyaltyEventSource](#type-loyaltyeventsource) for possible values
    /// </summary>
    [JsonPropertyName("source")]
    public required LoyaltyEventSource Source { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `EXPIRE_POINTS`.
    /// </summary>
    [JsonPropertyName("expire_points")]
    public LoyaltyEventExpirePoints? ExpirePoints { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `OTHER`.
    /// </summary>
    [JsonPropertyName("other_event")]
    public LoyaltyEventOther? OtherEvent { get; set; }

    /// <summary>
    /// Provides metadata when the event `type` is `ACCUMULATE_PROMOTION_POINTS`.
    /// </summary>
    [JsonPropertyName("accumulate_promotion_points")]
    public LoyaltyEventAccumulatePromotionPoints? AccumulatePromotionPoints { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
