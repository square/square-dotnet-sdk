using System.Text.Json;
using System.Text.Json.Serialization;
using Square.Core;

namespace Square;

/// <summary>
/// Represents the transfer of a quantity of product inventory at a
/// particular time from one location to another.
/// </summary>
public record InventoryTransfer
{
    /// <summary>
    /// A unique ID generated by Square for the
    /// `InventoryTransfer`.
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// An optional ID provided by the application to tie the
    /// `InventoryTransfer` to an external system.
    /// </summary>
    [JsonPropertyName("reference_id")]
    public string? ReferenceId { get; set; }

    /// <summary>
    /// The [inventory state](entity:InventoryState) for the quantity of
    /// items being transferred.
    /// See [InventoryState](#type-inventorystate) for possible values
    /// </summary>
    [JsonPropertyName("state")]
    public InventoryState? State { get; set; }

    /// <summary>
    /// The Square-generated ID of the [Location](entity:Location) where the related
    /// quantity of items was tracked before the transfer.
    /// </summary>
    [JsonPropertyName("from_location_id")]
    public string? FromLocationId { get; set; }

    /// <summary>
    /// The Square-generated ID of the [Location](entity:Location) where the related
    /// quantity of items was tracked after the transfer.
    /// </summary>
    [JsonPropertyName("to_location_id")]
    public string? ToLocationId { get; set; }

    /// <summary>
    /// The Square-generated ID of the
    /// [CatalogObject](entity:CatalogObject) being tracked.
    /// </summary>
    [JsonPropertyName("catalog_object_id")]
    public string? CatalogObjectId { get; set; }

    /// <summary>
    /// The [type](entity:CatalogObjectType) of the [CatalogObject](entity:CatalogObject) being tracked.
    ///
    /// The Inventory API supports setting and reading the `"catalog_object_type": "ITEM_VARIATION"` field value.
    /// In addition, it can also read the `"catalog_object_type": "ITEM"` field value that is set by the Square Restaurants app.
    /// </summary>
    [JsonPropertyName("catalog_object_type")]
    public string? CatalogObjectType { get; set; }

    /// <summary>
    /// The number of items affected by the transfer as a decimal string.
    /// Can support up to 5 digits after the decimal point.
    /// </summary>
    [JsonPropertyName("quantity")]
    public string? Quantity { get; set; }

    /// <summary>
    /// A client-generated RFC 3339-formatted timestamp that indicates when
    /// the transfer took place. For write actions, the `occurred_at` timestamp
    /// cannot be older than 24 hours or in the future relative to the time of the
    /// request.
    /// </summary>
    [JsonPropertyName("occurred_at")]
    public string? OccurredAt { get; set; }

    /// <summary>
    /// An RFC 3339-formatted timestamp that indicates when Square
    /// received the transfer request.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; set; }

    /// <summary>
    /// Information about the application that initiated the
    /// inventory transfer.
    /// </summary>
    [JsonPropertyName("source")]
    public SourceApplication? Source { get; set; }

    /// <summary>
    /// The Square-generated ID of the [Employee](entity:Employee) responsible for the
    /// inventory transfer.
    /// </summary>
    [JsonPropertyName("employee_id")]
    public string? EmployeeId { get; set; }

    /// <summary>
    /// The Square-generated ID of the [Team Member](entity:TeamMember) responsible for the
    /// inventory transfer.
    /// </summary>
    [JsonPropertyName("team_member_id")]
    public string? TeamMemberId { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
