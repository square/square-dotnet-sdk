using System.Text.Json;
using System.Text.Json.Serialization;
using Square.Core;

namespace Square;

/// <summary>
/// Represents a [dispute](https://developer.squareup.com/docs/disputes-api/overview) a cardholder initiated with their bank.
/// </summary>
[Serializable]
public record Dispute : IJsonOnDeserialized
{
    [JsonExtensionData]
    private readonly IDictionary<string, JsonElement> _extensionData =
        new Dictionary<string, JsonElement>();

    /// <summary>
    /// The unique ID for this `Dispute`, generated by Square.
    /// </summary>
    [JsonPropertyName("dispute_id")]
    public string? DisputeId { get; set; }

    /// <summary>
    /// The unique ID for this `Dispute`, generated by Square.
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// The disputed amount, which can be less than the total transaction amount.
    /// For instance, if multiple items were purchased but the cardholder only initiates a dispute over some of the items.
    /// </summary>
    [JsonPropertyName("amount_money")]
    public Money? AmountMoney { get; set; }

    /// <summary>
    /// The reason why the cardholder initiated the dispute.
    /// See [DisputeReason](#type-disputereason) for possible values
    /// </summary>
    [JsonPropertyName("reason")]
    public DisputeReason? Reason { get; set; }

    /// <summary>
    /// The current state of this dispute.
    /// See [DisputeState](#type-disputestate) for possible values
    /// </summary>
    [JsonPropertyName("state")]
    public DisputeState? State { get; set; }

    /// <summary>
    /// The deadline by which the seller must respond to the dispute, in [RFC 3339 format](https://developer.squareup.com/docs/build-basics/common-data-types/working-with-dates).
    /// </summary>
    [JsonPropertyName("due_at")]
    public string? DueAt { get; set; }

    /// <summary>
    /// The payment challenged in this dispute.
    /// </summary>
    [JsonPropertyName("disputed_payment")]
    public DisputedPayment? DisputedPayment { get; set; }

    /// <summary>
    /// The IDs of the evidence associated with the dispute.
    /// </summary>
    [JsonPropertyName("evidence_ids")]
    public IEnumerable<string>? EvidenceIds { get; set; }

    /// <summary>
    /// The card brand used in the disputed payment.
    /// See [CardBrand](#type-cardbrand) for possible values
    /// </summary>
    [JsonPropertyName("card_brand")]
    public CardBrand? CardBrand { get; set; }

    /// <summary>
    /// The timestamp when the dispute was created, in RFC 3339 format.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; set; }

    /// <summary>
    /// The timestamp when the dispute was last updated, in RFC 3339 format.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("updated_at")]
    public string? UpdatedAt { get; set; }

    /// <summary>
    /// The ID of the dispute in the card brand system, generated by the card brand.
    /// </summary>
    [JsonPropertyName("brand_dispute_id")]
    public string? BrandDisputeId { get; set; }

    /// <summary>
    /// The timestamp when the dispute was reported, in RFC 3339 format.
    /// </summary>
    [JsonPropertyName("reported_date")]
    public string? ReportedDate { get; set; }

    /// <summary>
    /// The timestamp when the dispute was reported, in RFC 3339 format.
    /// </summary>
    [JsonPropertyName("reported_at")]
    public string? ReportedAt { get; set; }

    /// <summary>
    /// The current version of the `Dispute`.
    /// </summary>
    [JsonPropertyName("version")]
    public int? Version { get; set; }

    /// <summary>
    /// The ID of the location where the dispute originated.
    /// </summary>
    [JsonPropertyName("location_id")]
    public string? LocationId { get; set; }

    [JsonIgnore]
    public ReadOnlyAdditionalProperties AdditionalProperties { get; private set; } = new();

    void IJsonOnDeserialized.OnDeserialized() =>
        AdditionalProperties.CopyFromExtensionData(_extensionData);

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
