using System.Text.Json;
using System.Text.Json.Serialization;
using Square.Core;

namespace Square;

/// <summary>
/// Represents a tax that applies to one or more line item in the order.
///
/// Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
/// The amount distributed to each line item is relative to the amount the item
/// contributes to the order subtotal.
/// </summary>
[Serializable]
public record OrderLineItemTax : IJsonOnDeserialized
{
    [JsonExtensionData]
    private readonly IDictionary<string, JsonElement> _extensionData =
        new Dictionary<string, JsonElement>();

    /// <summary>
    /// A unique ID that identifies the tax only within this order.
    /// </summary>
    [JsonPropertyName("uid")]
    public string? Uid { get; set; }

    /// <summary>
    /// The catalog object ID referencing [CatalogTax](entity:CatalogTax).
    /// </summary>
    [JsonPropertyName("catalog_object_id")]
    public string? CatalogObjectId { get; set; }

    /// <summary>
    /// The version of the catalog object that this tax references.
    /// </summary>
    [JsonPropertyName("catalog_version")]
    public long? CatalogVersion { get; set; }

    /// <summary>
    /// The tax's name.
    /// </summary>
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    /// <summary>
    /// Indicates the calculation method used to apply the tax.
    /// See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
    /// </summary>
    [JsonPropertyName("type")]
    public OrderLineItemTaxType? Type { get; set; }

    /// <summary>
    /// The percentage of the tax, as a string representation of a decimal
    /// number. For example, a value of `"7.25"` corresponds to a percentage of
    /// 7.25%.
    /// </summary>
    [JsonPropertyName("percentage")]
    public string? Percentage { get; set; }

    /// <summary>
    /// Application-defined data attached to this tax. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    ///
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    ///
    /// Values have a maximum length of 255 characters.
    ///
    /// An application can have up to 10 entries per metadata field.
    ///
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    ///
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string?>? Metadata { get; set; }

    /// <summary>
    /// The amount of money applied to the order by the tax.
    ///
    /// - For percentage-based taxes, `applied_money` is the money
    /// calculated using the percentage.
    /// </summary>
    [JsonPropertyName("applied_money")]
    public Money? AppliedMoney { get; set; }

    /// <summary>
    /// Indicates the level at which the tax applies. For `ORDER` scoped taxes,
    /// Square generates references in `applied_taxes` on all order line items that do
    /// not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
    /// with references in their `applied_taxes` field.
    ///
    /// This field is immutable. To change the scope, you must delete the tax and
    /// re-add it as a new tax.
    /// See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
    /// </summary>
    [JsonPropertyName("scope")]
    public OrderLineItemTaxScope? Scope { get; set; }

    /// <summary>
    /// Determines whether the tax was automatically applied to the order based on
    /// the catalog configuration. For an example, see
    /// [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("auto_applied")]
    public bool? AutoApplied { get; set; }

    [JsonIgnore]
    public ReadOnlyAdditionalProperties AdditionalProperties { get; private set; } = new();

    void IJsonOnDeserialized.OnDeserialized() =>
        AdditionalProperties.CopyFromExtensionData(_extensionData);

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
