using System.Text.Json;
using System.Text.Json.Serialization;
using Square;
using Square.Core;

namespace Square.Checkout;

/// <summary>
/// Square Checkout lets merchants accept online payments for supported
/// payment types using a checkout workflow hosted on squareup.com.
/// </summary>
public record Checkout
{
    /// <summary>
    /// ID generated by Square Checkout when a new checkout is requested.
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// The URL that the buyer's browser should be redirected to after the
    /// checkout is completed.
    /// </summary>
    [JsonPropertyName("checkout_page_url")]
    public string? CheckoutPageUrl { get; set; }

    /// <summary>
    /// If `true`, Square Checkout will collect shipping information on your
    /// behalf and store that information with the transaction information in your
    /// Square Dashboard.
    ///
    /// Default: `false`.
    /// </summary>
    [JsonPropertyName("ask_for_shipping_address")]
    public bool? AskForShippingAddress { get; set; }

    /// <summary>
    /// The email address to display on the Square Checkout confirmation page
    /// and confirmation email that the buyer can use to contact the merchant.
    ///
    /// If this value is not set, the confirmation page and email will display the
    /// primary email address associated with the merchant's Square account.
    ///
    /// Default: none; only exists if explicitly set.
    /// </summary>
    [JsonPropertyName("merchant_support_email")]
    public string? MerchantSupportEmail { get; set; }

    /// <summary>
    /// If provided, the buyer's email is pre-populated on the checkout page
    /// as an editable text field.
    ///
    /// Default: none; only exists if explicitly set.
    /// </summary>
    [JsonPropertyName("pre_populate_buyer_email")]
    public string? PrePopulateBuyerEmail { get; set; }

    /// <summary>
    /// If provided, the buyer's shipping info is pre-populated on the
    /// checkout page as editable text fields.
    ///
    /// Default: none; only exists if explicitly set.
    /// </summary>
    [JsonPropertyName("pre_populate_shipping_address")]
    public Address? PrePopulateShippingAddress { get; set; }

    /// <summary>
    /// The URL to redirect to after checkout is completed with `checkoutId`,
    /// Square's `orderId`, `transactionId`, and `referenceId` appended as URL
    /// parameters. For example, if the provided redirect_url is
    /// `http://www.example.com/order-complete`, a successful transaction redirects
    /// the customer to:
    ///
    /// &lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx&lt;/code&gt;&lt;/pre&gt;
    ///
    /// If you do not provide a redirect URL, Square Checkout will display an order
    /// confirmation page on your behalf; however Square strongly recommends that
    /// you provide a redirect URL so you can verify the transaction results and
    /// finalize the order through your existing/normal confirmation workflow.
    /// </summary>
    [JsonPropertyName("redirect_url")]
    public string? RedirectUrl { get; set; }

    /// <summary>
    /// Order to be checked out.
    /// </summary>
    [JsonPropertyName("order")]
    public Order? Order { get; set; }

    /// <summary>
    /// The time when the checkout was created, in RFC 3339 format.
    /// </summary>
    [JsonAccess(JsonAccessType.ReadOnly)]
    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; set; }

    /// <summary>
    /// Additional recipients (other than the merchant) receiving a portion of this checkout.
    /// For example, fees assessed on the purchase by a third party integration.
    /// </summary>
    [JsonPropertyName("additional_recipients")]
    public IEnumerable<AdditionalRecipient>? AdditionalRecipients { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
