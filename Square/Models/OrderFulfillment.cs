using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class OrderFulfillment 
    {
        public OrderFulfillment(string uid = null,
            string type = null,
            string state = null,
            IDictionary<string, string> metadata = null,
            Models.OrderFulfillmentPickupDetails pickupDetails = null,
            Models.OrderFulfillmentShipmentDetails shipmentDetails = null)
        {
            Uid = uid;
            Type = type;
            State = state;
            Metadata = metadata;
            PickupDetails = pickupDetails;
            ShipmentDetails = shipmentDetails;
        }

        /// <summary>
        /// Unique ID that identifies the fulfillment only within this order.
        /// </summary>
        [JsonProperty("uid")]
        public string Uid { get; }

        /// <summary>
        /// The type of fulfillment.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; }

        /// <summary>
        /// The current state of this fulfillment.
        /// </summary>
        [JsonProperty("state")]
        public string State { get; }

        /// <summary>
        /// Application-defined data attached to this fulfillment. Metadata fields are intended
        /// to store descriptive references or associations with an entity in another system or store brief
        /// information about the object. Square does not process this field; it only stores and returns it
        /// in relevant API calls. Do not use metadata to store any sensitive information (personally
        /// identifiable information, card details, etc.).
        /// Keys written by applications must be 60 characters or less and must be in the character set
        /// `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed
        /// with a namespace, separated from the key with a ':' character.
        /// Values have a max length of 255 characters.
        /// An application may have up to 10 entries per metadata field.
        /// Entries written by applications are private and can only be read or modified by the same
        /// application.
        /// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
        /// </summary>
        [JsonProperty("metadata")]
        public IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// Contains details necessary to fulfill a pickup order.
        /// </summary>
        [JsonProperty("pickup_details")]
        public Models.OrderFulfillmentPickupDetails PickupDetails { get; }

        /// <summary>
        /// Contains details necessary to fulfill a shipment order.
        /// </summary>
        [JsonProperty("shipment_details")]
        public Models.OrderFulfillmentShipmentDetails ShipmentDetails { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Uid(Uid)
                .Type(Type)
                .State(State)
                .Metadata(Metadata)
                .PickupDetails(PickupDetails)
                .ShipmentDetails(ShipmentDetails);
            return builder;
        }

        public class Builder
        {
            private string uid;
            private string type;
            private string state;
            private IDictionary<string, string> metadata = new Dictionary<string, string>();
            private Models.OrderFulfillmentPickupDetails pickupDetails;
            private Models.OrderFulfillmentShipmentDetails shipmentDetails;

            public Builder() { }
            public Builder Uid(string value)
            {
                uid = value;
                return this;
            }

            public Builder Type(string value)
            {
                type = value;
                return this;
            }

            public Builder State(string value)
            {
                state = value;
                return this;
            }

            public Builder Metadata(IDictionary<string, string> value)
            {
                metadata = value;
                return this;
            }

            public Builder PickupDetails(Models.OrderFulfillmentPickupDetails value)
            {
                pickupDetails = value;
                return this;
            }

            public Builder ShipmentDetails(Models.OrderFulfillmentShipmentDetails value)
            {
                shipmentDetails = value;
                return this;
            }

            public OrderFulfillment Build()
            {
                return new OrderFulfillment(uid,
                    type,
                    state,
                    metadata,
                    pickupDetails,
                    shipmentDetails);
            }
        }
    }
}