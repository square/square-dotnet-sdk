using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class CardPaymentDetails 
    {
        public CardPaymentDetails(string status = null,
            Models.Card card = null,
            string entryMethod = null,
            string cvvStatus = null,
            string avsStatus = null,
            string authResultCode = null,
            string applicationIdentifier = null,
            string applicationName = null,
            string applicationCryptogram = null,
            string verificationMethod = null,
            string verificationResults = null,
            string statementDescription = null,
            Models.DeviceDetails deviceDetails = null,
            IList<Models.Error> errors = null)
        {
            Status = status;
            Card = card;
            EntryMethod = entryMethod;
            CvvStatus = cvvStatus;
            AvsStatus = avsStatus;
            AuthResultCode = authResultCode;
            ApplicationIdentifier = applicationIdentifier;
            ApplicationName = applicationName;
            ApplicationCryptogram = applicationCryptogram;
            VerificationMethod = verificationMethod;
            VerificationResults = verificationResults;
            StatementDescription = statementDescription;
            DeviceDetails = deviceDetails;
            Errors = errors;
        }

        /// <summary>
        /// The card payment's current state. It can be one of: `AUTHORIZED`, `CAPTURED`, `VOIDED`,
        /// `FAILED`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; }

        /// <summary>
        /// Represents the payment details of a card to be used for payments. These
        /// details are determined by the `card_nonce` generated by `SqPaymentForm`.
        /// </summary>
        [JsonProperty("card")]
        public Models.Card Card { get; }

        /// <summary>
        /// The method used to enter the card's details for the payment.  Can be
        /// `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
        /// </summary>
        [JsonProperty("entry_method")]
        public string EntryMethod { get; }

        /// <summary>
        /// Status code returned from the Card Verification Value (CVV) check. Can be
        /// `CVV_ACCEPTED`, `CVV_REJECTED`, `CVV_NOT_CHECKED`.
        /// </summary>
        [JsonProperty("cvv_status")]
        public string CvvStatus { get; }

        /// <summary>
        /// Status code returned from the Address Verification System (AVS) check. Can be
        /// `AVS_ACCEPTED`, `AVS_REJECTED`, `AVS_NOT_CHECKED`.
        /// </summary>
        [JsonProperty("avs_status")]
        public string AvsStatus { get; }

        /// <summary>
        /// Status code returned by the card issuer that describes the payment's
        /// authorization status.
        /// </summary>
        [JsonProperty("auth_result_code")]
        public string AuthResultCode { get; }

        /// <summary>
        /// For EMV payments, identifies the EMV application used for the payment.
        /// </summary>
        [JsonProperty("application_identifier")]
        public string ApplicationIdentifier { get; }

        /// <summary>
        /// For EMV payments, the human-readable name of the EMV application used for the payment.
        /// </summary>
        [JsonProperty("application_name")]
        public string ApplicationName { get; }

        /// <summary>
        /// For EMV payments, the cryptogram generated for the payment.
        /// </summary>
        [JsonProperty("application_cryptogram")]
        public string ApplicationCryptogram { get; }

        /// <summary>
        /// For EMV payments, method used to verify the cardholder's identity.  Can be one of
        /// `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
        /// </summary>
        [JsonProperty("verification_method")]
        public string VerificationMethod { get; }

        /// <summary>
        /// For EMV payments, the results of the cardholder verification.  Can be one of
        /// `SUCCESS`, `FAILURE`, or `UNKNOWN`.
        /// </summary>
        [JsonProperty("verification_results")]
        public string VerificationResults { get; }

        /// <summary>
        /// The statement description sent to the card networks.
        /// Note: The actual statement description will vary and is likely to be truncated and appended with
        /// additional information on a per issuer basis.
        /// </summary>
        [JsonProperty("statement_description")]
        public string StatementDescription { get; }

        /// <summary>
        /// Details about the device that took the payment.
        /// </summary>
        [JsonProperty("device_details")]
        public Models.DeviceDetails DeviceDetails { get; }

        /// <summary>
        /// Information on errors encountered during the request.
        /// </summary>
        [JsonProperty("errors")]
        public IList<Models.Error> Errors { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Status(Status)
                .Card(Card)
                .EntryMethod(EntryMethod)
                .CvvStatus(CvvStatus)
                .AvsStatus(AvsStatus)
                .AuthResultCode(AuthResultCode)
                .ApplicationIdentifier(ApplicationIdentifier)
                .ApplicationName(ApplicationName)
                .ApplicationCryptogram(ApplicationCryptogram)
                .VerificationMethod(VerificationMethod)
                .VerificationResults(VerificationResults)
                .StatementDescription(StatementDescription)
                .DeviceDetails(DeviceDetails)
                .Errors(Errors);
            return builder;
        }

        public class Builder
        {
            private string status;
            private Models.Card card;
            private string entryMethod;
            private string cvvStatus;
            private string avsStatus;
            private string authResultCode;
            private string applicationIdentifier;
            private string applicationName;
            private string applicationCryptogram;
            private string verificationMethod;
            private string verificationResults;
            private string statementDescription;
            private Models.DeviceDetails deviceDetails;
            private IList<Models.Error> errors = new List<Models.Error>();

            public Builder() { }
            public Builder Status(string value)
            {
                status = value;
                return this;
            }

            public Builder Card(Models.Card value)
            {
                card = value;
                return this;
            }

            public Builder EntryMethod(string value)
            {
                entryMethod = value;
                return this;
            }

            public Builder CvvStatus(string value)
            {
                cvvStatus = value;
                return this;
            }

            public Builder AvsStatus(string value)
            {
                avsStatus = value;
                return this;
            }

            public Builder AuthResultCode(string value)
            {
                authResultCode = value;
                return this;
            }

            public Builder ApplicationIdentifier(string value)
            {
                applicationIdentifier = value;
                return this;
            }

            public Builder ApplicationName(string value)
            {
                applicationName = value;
                return this;
            }

            public Builder ApplicationCryptogram(string value)
            {
                applicationCryptogram = value;
                return this;
            }

            public Builder VerificationMethod(string value)
            {
                verificationMethod = value;
                return this;
            }

            public Builder VerificationResults(string value)
            {
                verificationResults = value;
                return this;
            }

            public Builder StatementDescription(string value)
            {
                statementDescription = value;
                return this;
            }

            public Builder DeviceDetails(Models.DeviceDetails value)
            {
                deviceDetails = value;
                return this;
            }

            public Builder Errors(IList<Models.Error> value)
            {
                errors = value;
                return this;
            }

            public CardPaymentDetails Build()
            {
                return new CardPaymentDetails(status,
                    card,
                    entryMethod,
                    cvvStatus,
                    avsStatus,
                    authResultCode,
                    applicationIdentifier,
                    applicationName,
                    applicationCryptogram,
                    verificationMethod,
                    verificationResults,
                    statementDescription,
                    deviceDetails,
                    errors);
            }
        }
    }
}