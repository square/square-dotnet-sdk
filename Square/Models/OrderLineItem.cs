using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class OrderLineItem 
    {
        public OrderLineItem(string quantity,
            string uid = null,
            string name = null,
            Models.OrderQuantityUnit quantityUnit = null,
            string note = null,
            string catalogObjectId = null,
            string variationName = null,
            IDictionary<string, string> metadata = null,
            IList<Models.OrderLineItemModifier> modifiers = null,
            IList<Models.OrderLineItemTax> taxes = null,
            IList<Models.OrderLineItemDiscount> discounts = null,
            IList<Models.OrderLineItemAppliedTax> appliedTaxes = null,
            IList<Models.OrderLineItemAppliedDiscount> appliedDiscounts = null,
            Models.Money basePriceMoney = null,
            Models.Money variationTotalPriceMoney = null,
            Models.Money grossSalesMoney = null,
            Models.Money totalTaxMoney = null,
            Models.Money totalDiscountMoney = null,
            Models.Money totalMoney = null)
        {
            Uid = uid;
            Name = name;
            Quantity = quantity;
            QuantityUnit = quantityUnit;
            Note = note;
            CatalogObjectId = catalogObjectId;
            VariationName = variationName;
            Metadata = metadata;
            Modifiers = modifiers;
            Taxes = taxes;
            Discounts = discounts;
            AppliedTaxes = appliedTaxes;
            AppliedDiscounts = appliedDiscounts;
            BasePriceMoney = basePriceMoney;
            VariationTotalPriceMoney = variationTotalPriceMoney;
            GrossSalesMoney = grossSalesMoney;
            TotalTaxMoney = totalTaxMoney;
            TotalDiscountMoney = totalDiscountMoney;
            TotalMoney = totalMoney;
        }

        /// <summary>
        /// Unique ID that identifies the line item only within this order.
        /// </summary>
        [JsonProperty("uid")]
        public string Uid { get; }

        /// <summary>
        /// The name of the line item.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; }

        /// <summary>
        /// The quantity purchased, formatted as a decimal number.
        /// For example: `"3"`.
        /// Line items with a `quantity_unit` can have non-integer quantities.
        /// For example: `"1.70000"`.
        /// </summary>
        [JsonProperty("quantity")]
        public string Quantity { get; }

        /// <summary>
        /// Contains the measurement unit for a quantity and a precision which
        /// specifies the number of digits after the decimal point for decimal quantities.
        /// </summary>
        [JsonProperty("quantity_unit")]
        public Models.OrderQuantityUnit QuantityUnit { get; }

        /// <summary>
        /// The note of the line item.
        /// </summary>
        [JsonProperty("note")]
        public string Note { get; }

        /// <summary>
        /// The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.
        /// </summary>
        [JsonProperty("catalog_object_id")]
        public string CatalogObjectId { get; }

        /// <summary>
        /// The name of the variation applied to this line item.
        /// </summary>
        [JsonProperty("variation_name")]
        public string VariationName { get; }

        /// <summary>
        /// Application-defined data attached to this line item. Metadata fields are intended
        /// to store descriptive references or associations with an entity in another system or store brief
        /// information about the object. Square does not process this field; it only stores and returns it
        /// in relevant API calls. Do not use metadata to store any sensitive information (personally
        /// identifiable information, card details, etc.).
        /// Keys written by applications must be 60 characters or less and must be in the character set
        /// `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed
        /// with a namespace, separated from the key with a ':' character.
        /// Values have a max length of 255 characters.
        /// An application may have up to 10 entries per metadata field.
        /// Entries written by applications are private and can only be read or modified by the same
        /// application.
        /// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
        /// </summary>
        [JsonProperty("metadata")]
        public IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// The [CatalogModifier](#type-catalogmodifier)s applied to this line item.
        /// </summary>
        [JsonProperty("modifiers")]
        public IList<Models.OrderLineItemModifier> Modifiers { get; }

        /// <summary>
        /// A list of taxes applied to this line item. On read or retrieve, this list includes both
        /// item-level taxes and any order-level taxes apportioned to this item. When creating an Order,
        /// set your item-level taxes in this list.
        /// This field has been deprecated in favour of `applied_taxes`. Usage of both this field and
        /// `applied_taxes` when creating an order will result in an error. Usage of this field when
        /// sending requests to the UpdateOrder endpoint will result in an error.
        /// </summary>
        [JsonProperty("taxes")]
        public IList<Models.OrderLineItemTax> Taxes { get; }

        /// <summary>
        /// A list of discounts applied to this line item. On read or retrieve, this list includes
        /// both item-level discounts and any order-level discounts apportioned to this item. When
        /// creating an Order, set your item-level discounts in this list.
        /// This field has been deprecated in favour of `applied_discounts`. Usage of both this field and
        /// `applied_discounts` when creating an order will result in an error. Usage of this field when
        /// sending requests to the UpdateOrder endpoint will result in an error.
        /// </summary>
        [JsonProperty("discounts")]
        public IList<Models.OrderLineItemDiscount> Discounts { get; }

        /// <summary>
        /// The list of references to taxes applied to this line item. Each
        /// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
        /// top-level `OrderLineItemTax` applied to the line item. On reads, the
        /// amount applied is populated.
        /// An `OrderLineItemAppliedTax` will be automatically created on every line
        /// item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
        /// records for `LINE_ITEM` scoped taxes must be added in requests for the tax
        /// to apply to any line items.
        /// To change the amount of a tax, modify the referenced top-level tax.
        /// </summary>
        [JsonProperty("applied_taxes")]
        public IList<Models.OrderLineItemAppliedTax> AppliedTaxes { get; }

        /// <summary>
        /// The list of references to discounts applied to this line item. Each
        /// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
        /// `OrderLineItemDiscounts` applied to the line item. On reads, the amount
        /// applied is populated.
        /// An `OrderLineItemAppliedDiscount` will be automatically created on every line item for all
        /// `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
        /// for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
        /// line items.
        /// To change the amount of a discount, modify the referenced top-level discount.
        /// </summary>
        [JsonProperty("applied_discounts")]
        public IList<Models.OrderLineItemAppliedDiscount> AppliedDiscounts { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("base_price_money")]
        public Models.Money BasePriceMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("variation_total_price_money")]
        public Models.Money VariationTotalPriceMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("gross_sales_money")]
        public Models.Money GrossSalesMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("total_tax_money")]
        public Models.Money TotalTaxMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("total_discount_money")]
        public Models.Money TotalDiscountMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("total_money")]
        public Models.Money TotalMoney { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder(Quantity)
                .Uid(Uid)
                .Name(Name)
                .QuantityUnit(QuantityUnit)
                .Note(Note)
                .CatalogObjectId(CatalogObjectId)
                .VariationName(VariationName)
                .Metadata(Metadata)
                .Modifiers(Modifiers)
                .Taxes(Taxes)
                .Discounts(Discounts)
                .AppliedTaxes(AppliedTaxes)
                .AppliedDiscounts(AppliedDiscounts)
                .BasePriceMoney(BasePriceMoney)
                .VariationTotalPriceMoney(VariationTotalPriceMoney)
                .GrossSalesMoney(GrossSalesMoney)
                .TotalTaxMoney(TotalTaxMoney)
                .TotalDiscountMoney(TotalDiscountMoney)
                .TotalMoney(TotalMoney);
            return builder;
        }

        public class Builder
        {
            private string quantity;
            private string uid;
            private string name;
            private Models.OrderQuantityUnit quantityUnit;
            private string note;
            private string catalogObjectId;
            private string variationName;
            private IDictionary<string, string> metadata = new Dictionary<string, string>();
            private IList<Models.OrderLineItemModifier> modifiers = new List<Models.OrderLineItemModifier>();
            private IList<Models.OrderLineItemTax> taxes = new List<Models.OrderLineItemTax>();
            private IList<Models.OrderLineItemDiscount> discounts = new List<Models.OrderLineItemDiscount>();
            private IList<Models.OrderLineItemAppliedTax> appliedTaxes = new List<Models.OrderLineItemAppliedTax>();
            private IList<Models.OrderLineItemAppliedDiscount> appliedDiscounts = new List<Models.OrderLineItemAppliedDiscount>();
            private Models.Money basePriceMoney;
            private Models.Money variationTotalPriceMoney;
            private Models.Money grossSalesMoney;
            private Models.Money totalTaxMoney;
            private Models.Money totalDiscountMoney;
            private Models.Money totalMoney;

            public Builder(string quantity)
            {
                this.quantity = quantity;
            }
            public Builder Quantity(string value)
            {
                quantity = value;
                return this;
            }

            public Builder Uid(string value)
            {
                uid = value;
                return this;
            }

            public Builder Name(string value)
            {
                name = value;
                return this;
            }

            public Builder QuantityUnit(Models.OrderQuantityUnit value)
            {
                quantityUnit = value;
                return this;
            }

            public Builder Note(string value)
            {
                note = value;
                return this;
            }

            public Builder CatalogObjectId(string value)
            {
                catalogObjectId = value;
                return this;
            }

            public Builder VariationName(string value)
            {
                variationName = value;
                return this;
            }

            public Builder Metadata(IDictionary<string, string> value)
            {
                metadata = value;
                return this;
            }

            public Builder Modifiers(IList<Models.OrderLineItemModifier> value)
            {
                modifiers = value;
                return this;
            }

            public Builder Taxes(IList<Models.OrderLineItemTax> value)
            {
                taxes = value;
                return this;
            }

            public Builder Discounts(IList<Models.OrderLineItemDiscount> value)
            {
                discounts = value;
                return this;
            }

            public Builder AppliedTaxes(IList<Models.OrderLineItemAppliedTax> value)
            {
                appliedTaxes = value;
                return this;
            }

            public Builder AppliedDiscounts(IList<Models.OrderLineItemAppliedDiscount> value)
            {
                appliedDiscounts = value;
                return this;
            }

            public Builder BasePriceMoney(Models.Money value)
            {
                basePriceMoney = value;
                return this;
            }

            public Builder VariationTotalPriceMoney(Models.Money value)
            {
                variationTotalPriceMoney = value;
                return this;
            }

            public Builder GrossSalesMoney(Models.Money value)
            {
                grossSalesMoney = value;
                return this;
            }

            public Builder TotalTaxMoney(Models.Money value)
            {
                totalTaxMoney = value;
                return this;
            }

            public Builder TotalDiscountMoney(Models.Money value)
            {
                totalDiscountMoney = value;
                return this;
            }

            public Builder TotalMoney(Models.Money value)
            {
                totalMoney = value;
                return this;
            }

            public OrderLineItem Build()
            {
                return new OrderLineItem(quantity,
                    uid,
                    name,
                    quantityUnit,
                    note,
                    catalogObjectId,
                    variationName,
                    metadata,
                    modifiers,
                    taxes,
                    discounts,
                    appliedTaxes,
                    appliedDiscounts,
                    basePriceMoney,
                    variationTotalPriceMoney,
                    grossSalesMoney,
                    totalTaxMoney,
                    totalDiscountMoney,
                    totalMoney);
            }
        }
    }
}