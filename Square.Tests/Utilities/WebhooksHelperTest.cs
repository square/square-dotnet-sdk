using System;
using NUnit.Framework;
using Square.Utilities;

namespace Square.Tests.Utilities
{
    [TestFixture]
    public class WebhooksHelperTest
    {
        // These were generated by using webhook.site and the Square Developer Portal to send a test notification to a test webhook subscription.
        const string NOTIFICATION_URL = "https://webhook.site/679a4f3a-dcfa-49ee-bac5-9d0edad886b9";
        private const string SIGNATURE_KEY = "Ibxx_5AKakO-3qeNVR61Dw";
        private const string BODY_STRING = "{\"merchant_id\":\"MLEFBHHSJGVHD\",\"type\":\"webhooks.test_notification\",\"event_id\":\"ac3ac95b-f97d-458c-a6e6-18981597e05f\",\"created_at\":\"2022-07-13T20:30:59.037339943Z\",\"data\":{\"type\":\"webhooks\",\"id\":\"bc368e64-01aa-407e-b46e-3231809b1129\"}}";
        private const string SIGNATURE_HEADER = "GF4YkrJgGBDZ9NIYbNXBnMzqb2HoL4RW/S6vkZ9/2N4=";

        [Test]
        public void IsValidWebhookEventSignatureIsTrueForValidNotification()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.True(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsTrueForEscapedBodyValidNotification()
        {
            const string escpaedRequestBody = "{\"data\":{\"type\":\"webhooks\",\"id\":\">id<\"}}";
            const string newSignatureHeader = "Cxt7+aTi4rKgcA0bC4g9EHdVtLSDWdqccmL5MvihU4U=";
            const string signatureKey = "signature-key";
            const string url = "https://webhook.site/webhooks";
            
            var result = WebhooksHelper.IsValidWebhookEventSignature(escpaedRequestBody, newSignatureHeader, signatureKey, url);
            Assert.True(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfNotificationUrlMismatch()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, SIGNATURE_KEY, "https://webhook.site/79a4f3a-dcfa-49ee-bac5-9d0edad886b9");
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfSignatureKeyIsInvalid()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, "MCmhFRxGX82xMwg5FsaoQA", NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfSignatureHeaderIsInvalid()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, "1z2n3DEJJiUPKcPzQo1ftvbxGdw=", SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfSignatureHeaderIsEmpty()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, "", SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfSignatureHeaderIsNull()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, null, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfBodyMismatch()
        {
            var bodyString = "{\"merchant_id\":\"MLEFBHHSJGVHD\",\"type\":\"webhooks.test_notification\",\"event_id\":\"ac3ac95b-f97d-458c-a6e6-18981597e05f\",\"created_at\":\"2022-06-13T20:30:59.037339943Z\",\"data\":{\"type\":\"webhooks\",\"id\":\"bc368e64-01aa-407e-b46e-3231809b1129\"}}";
            var result = WebhooksHelper.IsValidWebhookEventSignature(bodyString, SIGNATURE_HEADER, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfBodyIsFormatted()
        {
            var bodyString = @"{
  ""merchant_id"": ""MLEFBHHSJGVHD"",
  ""type"": ""webhooks.test_notification"",
  ""event_id"": ""ac3ac95b-f97d-458c-a6e6-18981597e05f"",
  ""created_at"": ""2022-07-13T20:30:59.037339943Z"",
  ""data"": {
    ""type"": ""webhooks"",
    ""id"": ""bc368e64-01aa-407e-b46e-3231809b1129""
  }
}";
            var result = WebhooksHelper.IsValidWebhookEventSignature(bodyString, SIGNATURE_HEADER, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfBodyIsEmpty()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature("", SIGNATURE_HEADER, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureIsFalseIfBodyIsNull()
        {
            var result = WebhooksHelper.IsValidWebhookEventSignature("", SIGNATURE_HEADER, SIGNATURE_KEY, NOTIFICATION_URL);
            Assert.False(result);
        }

        [Test]
        public void IsValidWebhookEventSignatureThrowsIfSignatureKeyIsEmpty()
        {
            var result = Assert.Throws<ArgumentNullException>(() => WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, "", NOTIFICATION_URL));
            Assert.AreEqual("Value cannot be null. (Parameter 'signatureKey')", result.Message);
        }

        [Test]
        public void IsValidWebhookEventSignatureThrowsIfSignatureKeyIsNull()
        {
            var result = Assert.Throws<ArgumentNullException>(() => WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, null, NOTIFICATION_URL));
            Assert.AreEqual("Value cannot be null. (Parameter 'signatureKey')", result.Message);
        }

        [Test]
        public void IsValidWebhookEventSignatureThrowsIfNotificationUrlIsEmpty()
        {
            var result = Assert.Throws<ArgumentNullException>(() => WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, SIGNATURE_KEY, ""));
            Assert.AreEqual("Value cannot be null. (Parameter 'notificationUrl')", result.Message);
        }

        [Test]
        public void IsValidWebhookEventSignatureThrowsIfNotificationUrlIsNull()
        {
            var result = Assert.Throws<ArgumentNullException>(() => WebhooksHelper.IsValidWebhookEventSignature(BODY_STRING, SIGNATURE_HEADER, SIGNATURE_KEY, null));
            Assert.AreEqual("Value cannot be null. (Parameter 'notificationUrl')", result.Message);
        }
    }
}